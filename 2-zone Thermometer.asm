;**************************************************************************************************************************
; Thermo2.asm
; Цифровой LCD-термометр с 2-мя датчиками DS18B20. 
; Оба датчика подключены к разным портам. 
;-------------------------------------------------------------------------------------------------------------------------
; !!!!!Подпрограммы второго датчика и работы с ЖКИ расположены после двоично-десятичного преобразования,
; иначе переполняется PCL во время исполнения подпрограммы "Fraction" и происходит сброс всей программы на начало!!!!!!!!!!!!!!
;--------------------------------------------------------------------------------------------------------------------------
; PIC16F873A      Кварц 4 мГц.
;=============================================================================================================================
            LIST        p=16F873A    
            __CONFIG    03F71H      ; Бит защиты выключен, WDT выключен, 
                                    ; стандартный XT - генератор, низковольтное программирование запрещено
; Примечание. Режим низковольтного программирования должен быть обязательно выключен, иначе, подключенный к 
; PORTB LCD будет получать неверные команды, а именно через PORTB,RB3.

          #INCLUDE   <P16F873A.INC>
;============================================================================================================================

; биты pегистpа STATUS
C	    	EQU    	0h
DC	    	EQU    	1h
Z		    EQU    	2h
PD		    EQU		3h
TO		    EQU    	4h
RP0		    EQU    	5h
RP1		    EQU		6h

; биты регистра PORTC

RS	        EQU     04h            ;
E           EQU     05h  


; биты регистра PORTC
DQ          EQU     06h            ; Датчик температуры №1
DQ2         EQU     07h            ; Датчик температуры №2
; регистры общего назначения

TEMP        EQU     20h
TEMPh       EQU     21h
TEMPl       EQU     22h
Place       EQU     23h
Count       EQU     24h
Count1      EQU     25h
Count2      EQU     26h
KeyCode     EQU     27h            ; Регистр хранения кода нажатой кнопки, код соответсвует таблице LCD
Dec         EQU     28h
Bufer       EQU     29h            ; Регистр обмена (команды) с DS1820
Bufer_L     EQU     2Ah            ; Хранение младшего байта данных
Bufer_H     EQU     2Bh            ; Хранение старшего байта данных
RegFloor    EQU     2Ch            ; Хранение данных целого значения температуры
RegCopy     EQU     2Dh            ; Копия RegFloor 

BIN0        EQU     30h            ; Регистр хранения результатов преобразований
                                   ; 1-го двоично-десятичного разряда.
BIN1        EQU     31h            ; ------- 2-го -------------------------
 
Mem         EQU     32h            ; Регистр оперативной памяти.
Bufer2      EQU     33h

F           EQU     1h
W           EQU     0h

            ORG     0
            GOTO    START
;=============================================================================================================================

START

 ;-------Подготовительные операции-------------------------------------------------------------------------------------------

      clrf         OPTION_REG
      clrf         INTCON           ; Запрет прерываний
     ;clrf         PORTA            ; Инициализация порт А
      clrf         PORTC            ; Инициализация порт С
      clrf         PORTB            ; Инициализация порт B
      bsf		   STATUS,RP0 	    ; Выбор банка 1
      bcf          STATUS,RP1
      movlw        b'0110'
      movwf        ADCON1           ; Выводы порта А - цифровые входы\выходы (по даташиту)
     ;clrf         TRISA            ; Порт А на выход
	  clrf	       TRISB		    ; Порт В на вывод
      movlw        b'00001111'
      movwf        TRISC            ; RC0-RC3 на вход, остальные на выход
      bcf		   STATUS,RP0	    ; Выбор банка 0
      bcf          STATUS, Z
      clrf         KeyCode
    
      call        LCD_Init          ; Инициализация ЖКИ
      
;---------------Вывод сообщения на экран ЖКИ-----------------------------------------------

      movlw       h'54'                    ; символ "Т"
      call        Lcd_Write_Data
      movlw       h'31'                    ; символ "1"
      call        Lcd_Write_Data           
  
      movlw       b'10000000'+ 40h         ; Перемещение курсора на вторую строку
      call        Lcd_Write_Cmd

      movlw       h'54'                    ; символ "Т"
      call        Lcd_Write_Data
      movlw       h'32'                    ; символ "2"
      call        Lcd_Write_Data

      ;call       Delay_3s
;==========================================================================================================
;---------------Работа с датчиком DS18B20-------------------------------------------------------------------
;===========================================================================================================
; Последовательность действий с DS18B20, согласно даташиту, следующая:
;1) Инициализация - установить 0 не менее 480мкс, затем 1 не менее 480мкс.  
;2) Команда Skip ROM (CCh)- пропуск чтения серийного номера датчика, если датчик один на линии.
;3) Команда Start Conv (44h)- команда запуска конвертации температуры.
;4) Ожидание окончания конвертации.
;5) Инициализациия.
;6) Skip ROM.
;7) Команда "Read_Scratchpad"(BEh) - чтение блокнота с данными температуры.
;8) Перекодировка полученных данных и вывод на LCD.
;9) Переход в п.1)
;-------------------------------------------------------------------------------------------------------------
Thermo:

      call       DQ_Init                    ; Инициализация датчика 
      call       DQ2_Init                   ; то же для 2-го датчика
                                          
      movlw      h'CC'                      ;Передача команды "Skip_ROM"(ССh) - команда пропуска сравнения серийного номера,                    
      movwf      Bufer                      ;применяется, если датчик один
      call       Out_Byte
      
      movlw      h'CC'                      ; то же для 2-го датчика                  
      movwf      Bufer2                 
      call       Out_Byte2  
                                          
      movlw      h'44'                      ; Передача команды "Start_Conv"(44h) - команда запуска конвертации данных температуры    
      movwf      Bufer             
      call       Out_Byte
      
      movlw      h'44'                      ; то же для 2-го датчика   
      movwf      Bufer2             
      call       Out_Byte2
   
Wait:                                       ; Ждем окончания преобразования, пока на линии не установится постоянная 1
      call       In_Byte2
      movlw      b'11111111'                ; т.е. пока Bufer не заполнится единицами, контролируем через флаг Z
      subwf      Bufer2,W                   ; достаточно подождать только второй датчик, т.к. 1-й начал преобразование раньше
      btfss      STATUS,Z
      goto       Wait
;----- 
      call       DQ_Init                    ; Снова инициализация и "Skip_ROM"
      call       DQ2_Init

      movlw      h'CC'                      ;
      movwf      Bufer
      call       Out_Byte 
      
      movlw      h'CC'                      ;
      movwf      Bufer2
      call       Out_Byte2    

      movlw      h'BE'                      ; Передача команды "Read_Scratchpad"(BEh) - чтение блокнота с данными температуры
      movwf      Bufer  
      call       Out_Byte
      
      movlw      h'BE'                      ; то же для 2-го датчика
      movwf      Bufer2  
      call       Out_Byte2

;-----чтение данных температуры 1-го датчика---
      
      call       In_Byte                    ; Чтение младшего байта температуры
      movwf      Bufer_L                    ; Запись младшего байта в Bufer_L
     
      call       In_Byte                    ; Чтение старшего байта температуры
      movwf      Bufer_H                    ; Запись cтаршего байта в Bufer_H
;-----               
      call       Display                    ; Вывод данных на LCD

;-----чтение данных температуры 2-го датчика---


      call         In_Byte2                 ; Чтение младшего байта температуры
      movwf        Bufer_L                  ; Запись младшего байта в Bufer_L

      call         In_Byte2                 ; Чтение старшего байта температуры
      movwf        Bufer_H                  ; Запись cтаршего байта в Bufer_H
;----- 

      movlw        b'10000000'+ h'42'       ; местоположение выводимого символа
      call         Lcd_Write_Cmd              
      call         Display2
    
      goto         Thermo

    
;===================Подпрограммы===========================================================================================
;==============Работа с первым датчиком====================================================================================
;Инициализация DS1820 "DQ_Init"--------------------------------------------------------------------------------------------

DQ_Init:                                   ; Упрощенная инициализация (без ожидания ответа присутсвия от датчика):
                                           ; 1)установить на DQ 0 на время 480-960 мкс
                                           ; 2)"отпустить" линию DQ (переводим RC6 в работу на вход) не менее чем 480 мкс

       bsf         STATUS, RP0             ; Переход в первый банк
       bsf         TRISC, DQ               ; Перевод DQ(RC6) на вход, на линии DQ устанавливается 1 (по даташиту, линию нужно "отпутить")
       bcf         STATUS, RP0             ; Возврат в 0-й банк.
       
       bcf         PORTC, DQ               ; устанавливаем 0 на DQ
       bsf         STATUS, RP0             ; переход в 1-й банк
       bcf         TRISC, DQ               ; RC6 на выход
       bcf         STATUS, RP0

      ; movlw       .98                     ; задержка 900 мкс (300+600)
      ; call        Delay_x
       movlw       .198
       call        Delay_x
       
       bsf         STATUS, RP0
       bsf         TRISC, DQ               ; Перевод DQ(RC6) на вход, на линии DQ устанавливается 1
       bcf         STATUS, RP0

       movlw        .198                    ; задержка 600 мкс
       call         Delay_x

       return   

;-------------------------------------------------------------------------------------------------------------------------    
; Подпрограмма передачи байта "Out_Byte":
; Цикл передачи бита по 1-Wire протоколу начинается импульсом низкого уровня 1-15 мкс,
; далее следует передаваемый бит(длительность не менее 60 мкс). Завершается цикл импульсом высокого уровня не менее 1 мкс.

Out_Byte:
      movlw        .8                      ; число бит в байте отправляем в счетчик
      movwf         Count
 lable1:
      rrf           Bufer,F                ; сдвиг передаваемого байта вправо

      btfss         STATUS,C               ; проверка текущего бита 0 или 1
      goto          Out_0                  ; передача 0
      goto          Out_1                  ; передача 1
 lable2:
      decfsz        Count,F                ; декремент счетчика бит и переход к проверке следующего бита
      goto          lable1

      return  

;---------------------------------------------------------------------------------------------------------------------------
; Попрограмма передачи 0 "Out_0 ":

Out_0:
      bcf          PORTC,DQ                ; установка 0 на DQ. Можно сразу же передавать 0, т.к. на линии после любой операции
      bsf          STATUS,RP0              ; устанавливается 1 (подтягивающий резистор)
      bcf          TRISC,DQ                ; работа RC6 на выход.
      bcf          STATUS,RP0 
  
      movlw        .18                     ; формируем длительность передаваемого бита 60 мкс. 
      call         Delay_x
      nop                                  ; длительность каждого передаваемого бита должна быть не менее 60 мкс.

      bsf          STATUS, RP0             ; установка 1 (осуществляется переводом RC6 на прием - высвобождение линии)
      bsf          TRISC, DQ
      bcf          STATUS, RP0

      goto         lable2   

;----------------------------------------------------------------------------------------------------------------------------
; Попрограмма передачи 1 "Out_1 ":

Out_1:    
     bcf          PORTC,DQ                ; перед формированием 1, необходимо установить 0, чтобы получился строб(не менее 1мкс)
     bsf          STATUS,RP0              ; т.к. единица там по умолчанию (подтягивающий резистор)
     bcf          TRISC, DQ
     bcf          STATUS,RP0

     bsf          STATUS,RP0              ; устанавливаем 1 на DQ, переводом линии RC6 в работу на вход (высокое состояние)
     bsf          TRISC,DQ
     bcf          STATUS,RP0

     movlw        .18                    
     call         Delay_x                 ; длительность каждого передаваемого бита должна быть не менее 60 мкс.

     goto         lable2   



;-----------------------------------------------------------------------------------------------------------------------------
; Подпрограмма приема данных "In_Byte"

In_Byte:
     movlw         .8                        ; количество бит приниваемого байта
     movwf         Count
     clrf          Bufer
In_Byte_1:                                   ; перед приемом данных необходимо сформировать строб(0-1)
     bcf           PORTC,DQ                  ; установка 0
     bsf           STATUS,RP0
     bcf           TRISC,DQ
     bcf           STATUS, RP0

     bsf           STATUS,RP0                ; установка 1
     bsf           TRISC,DQ
     bcf           STATUS,RP0
     nop
                                             ;запись в бит С принимаемого с линии бита
     btfss         PORTC,DQ                  ; на линии 0 или 1?
     bcf           STATUS,C                  ; если на линии 0,то С выставляется тоже в 0
     btfsc         PORTC,DQ                  ; если на линии 1, то бит С выставляется в 1
     bsf           STATUS,C 

     rrf           Bufer,F                   ; сдвиг Bufer вправо через С
     movlw         .12                       ; задерка на 40 мкс
     call          Delay_x    

     decfsz        Count,F
     goto          In_Byte_1
     movf          Bufer,W

     return

;-------------------------------------------------------------------------------------------------------------
; Подпрограмма обработки и вывода данных с датчика на LCD "Display". Основные моменты:
;1) Указываем положение первого символа
;2) Выводим знак температуры "+" или "-". Знак определяем по 8-му биту старшего байта данных.(Bufer_h,7)
;3) "Собираем" для удобства дальнейшей обработки в регистр RegFloor данные целого значения температуры.
;4) Перевод двоичных данных в двоично-десятичные.
;5) Вывод 1, если температура больше или равна 100С
;6) Ecли температура меньше 10, первый разряд (он будет раваен 0) не выводим.
;7) Вывод запятой после целой части
;8) Вывод и округление до 0,1С десятичной части температуры.
;

Display:
     movlw       b'10000000'+ h'2'              ; местоположение выводимого символа
     call        Lcd_Write_Cmd

Display2:
;-----анализируем знак температуры---  
  
     btfsc       Bufer_H,7                ; если 1, выводим "-", если 0, выводим "+"
     goto        Minus
     goto        Plus

;---вывод целого значения температуры---

;данные о температуре (целое значение, до запятой) хранятся в cтаршем полубайте младшего байта и трех младших битах
;старшего байта данных. Соберем для удобства эти данные в один регистр RegFloor , с сохранением последовательности.  
Floor:
     clrf        RegFloor
     movfw       Bufer_L                  ; копируем Bufer_L в  RegFloor
     movwf       RegFloor
     swapf       RegFloor,F               ; меняем местами младший и старший полубайты, это нужно, чтобы младшие 4 бита
                                          ; данных оказались в младшем полубайте RegFloor
                                          ; теперь нужно переместить оставшиеся 3 бита данных из младшего полубайта Bufer_H в RegFloor                                    ; в RegFloor
   
     btfsc       Bufer_H,0                ; если 0-й бит Bufer_H равен 1, пишем 1 в 4-й бит RegFloor и идем дальше, если 0, идем дальше 
     bsf         RegFloor,4
     btfss       Bufer_H,0                ; если 0-й бит Bufer_H равен 0, пишем 0 в 4-й бит RegFloor и идем дальше
     bcf         RegFloor,4

     btfsc       Bufer_H,1                ; аналогично для 1-го бита
     bsf         RegFloor,5
     btfss       Bufer_H,1
     bcf         RegFloor,5

     btfsc       Bufer_H,2                ; аналогично для 2-го бита
     bsf         RegFloor,6
     btfss       Bufer_H,2
     bcf         RegFloor,6

     bcf         RegFloor,7               ; 3-й бит не задействован ( по даташиту), поэтому просто обнуляем его.

   
     movfw       RegFloor                 ; копия в RegCopy
     movwf       RegCopy


; теперь двоичные данные целого значения температуры, с учетом исходной последовательности, собраны в RegFloor;
; теперь необходимо перекодировать их в двоично-десятичный код, используем стандартную подпрограмму Bin2_10

     call        Bin2_10

; теперь в BIN1 лежит значение десятков температуры, в BIN0 - единиц

     call        Display_x99;              ; вывод на LCD 2-х разрядного десятичного значения температуры

;---вывод "," после целого значения----

     movlw       h'2C'
     call        Lcd_Write_Data

;---вывод десятичного значения температуры----
    
     bcf         Bufer_L,7                  ; т.к данные десятичной части температуры находятся только в младшем полубайте,
     bcf         Bufer_L,6                  ; старший полубайт обнуляем.
     bcf         Bufer_L,5
     bcf         Bufer_L,4                   

     movf        Bufer_L,W      
     call        Fraction                   ; перекодировка и округление десятичной составляющей.

     call        Lcd_Write_Data
     
     movlw       h'20'
     call        Lcd_Write_Data 
  
    
Fraction:
     addwf        PCL,F
     retlw        h'30'
     retlw        h'31'
     retlw        h'31'
     retlw        h'32'
     retlw        h'33'
     retlw        h'33'
     retlw        h'34'
     retlw        h'34'
     retlw        h'35'
     retlw        h'36'
     retlw        h'36'
     retlw        h'37'
     retlw        h'37'
     retlw        h'38'
     retlw        h'39'
     retlw        h'39'
    
;--------------------------------------------------------------------------------------------------------------
; Подпрограмма отображения "-" 
Minus:
     movlw       h'2D'                   ; символ "-"
     call        Lcd_Write_Data

     comf        Bufer_L,F               ; данные отрицательной температуры необходимо сразу инвертировать и прибавить 1
     incf        Bufer_L,F

     comf        Bufer_H,F
              
     goto        Floor                   ; переходим к обработке целого значения температуры

;--------------------------------------------------------------------------------------------------------------
; Подпрограмма отображения "+"
Plus:
     movlw       h'2B'                   ; символ "+"
     call        Lcd_Write_Data
     goto        Floor                   ; переходим к обработке целого значения температуры

;-----------------------------------------------------------------------------------------------------------------
; Подпрограмма перекодировки двоичных данных в двоично-десятичные "Bin2_10", вариант для 1-го байтного числа.

Bin2_10:
     bcf         STATUS,C                ; Сброс флага переноса-заема.
     movlw       .8                      ; запись в регистр Count числа проходов преобразования,
     movwf       Count                   ; равного суммарному количеству битов = 8

     clrf        BIN0                  
     clrf        BIN1                   
    
; Циклический сдвиг влево через флаг С.
         
Loop4: 
     rlf         RegFloor,F               ; Циклический сдвиг влево  двоичного числа
           
     rlf         BIN0,F        

     decfsz      Count,F                  ; Декремент (-1) содержимого регистра Count 
     goto        adjDEC                   ; Если результат не=0, то переход в ПП adjDEC
                                          ; Если  результат =0, то программа исполняется далее.
; Поразрядное распределение содержимого регистра BIN0 (обоих полубайтов) по младшим полубайтам регистров BIN0 и BIN1.

     swapf        BIN0,W                   ; Запись старшего полубайта BIN0 в младший полубайт BIN1.
     andlw        0Fh                     
     movwf        BIN1                    

     movfw        BIN0                     ; Запись младшего полубайта BIN0 в младший полубайт BIN0.
     andlw        0Fh                      
     movwf        BIN0                     
           
; Конец распределения. Теперь в в младших полубайтах регистров BIN0 и BIN1 установлены
; двоично-десятичные числа в порядке возрастания разрядности. Старшие полубайты = 0.
     return  

; Запись в регистр FSR адресов регистров LED0...3 для дальнейшей косвенной адресации к ним в ПП adjBCD.
; Переход к обработке следующего LED - после возврата по стеку.                      

adjDEC   
     movlw       BIN0                     ; Запись в регистр FSR, через регистр W, адреса регистра BIN0
     movwf       FSR                      ; с дальнейшим переходом в ПП adjBCD
     call        adjBCD                   ; (адрес следующей команды закладывается в стек).
          
     goto        Loop4                

; Основные операции преобразования двоичных чисел в двоично-десятичные:
; операции сложения LED0...3 и констант 03h,30h с условиями по 3-му и 7-му битам.

adjBCD  
     movlw        3                       ; Сложить содержимое текущего BIN (BIN0 или BIN1) с числом 03h,  
     addwf       0,W                      ; c записью результата операции, через регистр W,
     movwf       Mem                      
  
     btfsc       Mem,3                    ; Анализ состояния 3-го бита регистра Mem.
     movwf       0                        ; Если бит № 3 =1, то содержимое регистра Mem 
                                          ; копируется в текущий BIN.

     movlw       30                       ; Если бит №3 =0, то содержимое текущего BIN складывается
     addwf       0,W                      ; с константой 30h, с последующей записью результата операции,  
     movwf       Mem                      ; через регистр W, в регистр Mem.

     btfsc       Mem,7                    ; Анализ состояния 7-го бита регистра Mem.
     movwf       0                        ; Если бит №7 =1, то содержимое регистра Mem 
                                          ; копируется в текущий BIN.

     retlw       0                        ; Если бит №7 =0, то регистр W очищается и происходит
                                          ; возврат по стеку в ПП adjDEC.

;-------------------------------------------------------------------------------------------------------------------
; Подпрограмма вывода на LCD 2-х разрядного целого значения температуры "Display_99"

; проверим превышает ли температура 100С
Display_x99:   
      movlw       .100                    ; вычтим из RegCopy .100, если флаг С поднят( температуры больше или равна 100)
      subwf       RegCopy,W               ; то перед целым значением выводим 1.
      btfsc       STATUS,C
   
      goto        Display_1xx

; проверим, есть ли 0 в первом разряде (температура от 0 до 10С)
      movf       BIN1,F                   
      btfsc      STATUS,Z                ; если флаг Z поднят, сразу переходим в выводу второго разряда(только единицы
      goto       Display_9               ; температуры, без десятка).

; вывод десятков
Display_10:
      movlw      h'30'                   ; к значению температуры добавляем 30h (код цифры 0 у LCD).
      iorwf      BIN1,W  
      call       Lcd_Write_Data

; вывод единиц
Display_9
      movlw      h'30'
      iorwf      BIN0,W
      call       Lcd_Write_Data
     
      return    
   
;-------------------------------------------------------------------------------------------------------------------------
; Подпрограмма вывода цифры 1 при температуре выше 100С "Display_1xx":

Display_1xx:
      movlw      h'31'
      call       Lcd_Write_Data
   
      goto       Display_10               ; переход к выводу десятков и единиц.



;==============Работа со вторым датчиком====================================================================================
;---------------------------------------------------------------------------------------------------------------------------
; Подпрограмма инициализации DS1820 "DQ2_Init"

DQ2_Init:                                   ; Упрощенная инициализация (без ожидания ответа присутсвия от датчика):
                                            ; 1)установить на DQ 0 на время 480-960 мкс
                                            ; 2)"отпустить" линию DQ (переводим RC6 в работу на вход) не менее чем 480 мкс

       bsf         STATUS, RP0              ; Переход в первый банк
       bsf         TRISC, DQ2               ; Перевод DQ(RC6) на вход, на линии DQ устанавливается 1 (по даташиту, линию нужно "отпутить")
       bcf         STATUS, RP0              ; Возврат в 0-й банк.
       
       bcf         PORTC, DQ2               ; устанавливаем 0 на DQ
       bsf         STATUS, RP0              ; переход в 1-й банк
       bcf         TRISC, DQ2               ; RC6 на выход
       bcf         STATUS, RP0

      ; movlw       .98                     ; задержка 900 мкс (300+600)
      ; call        Delay_x
       movlw       .198
       call        Delay_x
       
       bsf         STATUS, RP0
       bsf         TRISC, DQ2               ; Перевод DQ(RC6) на вход, на линии DQ устанавливается 1
       bcf         STATUS, RP0

       movlw        .198                    ; задержка 600 мкс
       call         Delay_x

       return   

;-------------------------------------------------------------------------------------------------------------------------    
; Подпрограмма передачи байта "Out_Byte2":
; Цикл передачи бита по 1-Wire протоколу начинается импульсом низкого уровня 1-15 мкс,
; далее следует передаваемый бит(длительность не менее 60 мкс). Завершается цикл импульсом высокого уровня не менее 1 мкс.

Out_Byte2:
      movlw        .8                       ; число бит в байте отправляем в счетчик
      movwf         Count
 lable12:
      rrf           Bufer2,F                ; сдвиг передаваемого байта вправо

      btfss         STATUS,C                ; проверка текущего бита 0 или 1
      goto          Out2_0                  ; передача 0
      goto          Out2_1                  ; передача 1
 lable22:
      decfsz        Count,F                 ; декремент счетчика бит и переход к проверке следующего бита
      goto          lable12

      return  


;---------------------------------------------------------------------------------------------------------------------------
; Попрограмма передачи 0 "Out2_0 ":

Out2_0:
      bcf          PORTC,DQ2                ; установка 0 на DQ. Можно сразу же передавать 0, т.к. на линии после любой операции
      bsf          STATUS,RP0               ; устанавливается 1 (подтягивающий резистор)
      bcf          TRISC,DQ2                ; работа RC6 на выход.
      bcf          STATUS,RP0 
  
      movlw        .18                      ; формируем длительность передаваемого бита 60 мкс. 
      call         Delay_x
      nop                                   ; длительность каждого передаваемого бита должна быть не менее 60 мкс.

      bsf          STATUS, RP0              ; установка 1 (осуществляется переводом RC6 на прием - высвобождение линии)
      bsf          TRISC, DQ2
      bcf          STATUS, RP0

      goto         lable22   


;----------------------------------------------------------------------------------------------------------------------------
; Попрограмма передачи 1 "Out2_1 ":

Out2_1:    
     bcf          PORTC,DQ2                 ; перед формированием 1, необходимо установить 0, чтобы получился строб(не менее 1мкс)
     bsf          STATUS,RP0                ; т.к. единица там по умолчанию (подтягивающий резистор)
     bcf          TRISC, DQ2
     bcf          STATUS,RP0

     bsf          STATUS,RP0                ; устанавливаем 1 на DQ, переводом линии RC6 в работу на вход (высокое состояние)
     bsf          TRISC,DQ2 
     bcf          STATUS,RP0

     movlw        .18                    
     call         Delay_x                   ; длительность каждого передаваемого бита должна быть не менее 60 мкс.

     goto         lable22  
;-----------------------------------------------------------------------------------------------------------------------------
; Подпрограмма приема данных "In_Byte2"

In_Byte2:
     movlw         .8                        ; количество бит приниваемого байта
     movwf         Count
     clrf          Bufer2
In_Byte2_1:                                 ; перед приемом данных необходимо сформировать строб(0-1)
     bcf           PORTC,DQ2                ; установка 0
     bsf           STATUS,RP0
     bcf           TRISC,DQ2
     bcf           STATUS, RP0

     bsf           STATUS,RP0               ; установка 1
     bsf           TRISC,DQ2
     bcf           STATUS,RP0
     nop
                                            ;запись в бит С принимаемого с линии бита
     btfss         PORTC,DQ2                ; на линии 0 или 1?
     bcf           STATUS,C                 ; если на линии 0,то С выставляется тоже в 0
     btfsc         PORTC,DQ2                ; если на линии 1, то бит С выставляется в 1
     bsf           STATUS,C

     rrf           Bufer2,F                  ; сдвиг Bufer вправо через С
     movlw         .12                       ; задерка на 40 мкс
     call          Delay_x    

     decfsz        Count,F
     goto          In_Byte2_1
     movf          Bufer2,W

     return

;==============Работа с ЖКИ================================================================================================
;---------------------------------------------------------------------------------------------------------------------------
; Инициализация ЖКИ:

 LCD_Init:    
      movlw      .185
      call        Delay                    ; более 100 ms
      movlw      b'00111000'               ; установка интерфейса 8 бит. Рекомендуется повторить 3 раза.
      call       Lcd_Write_Cmd
      movlw      .58            
      call       Delay                     ; более 10 ms
      movlw      b'00111000'               ; установка интерфейса 8 бит
      call       Lcd_Write_Cmd
      movlw      .58              
      call       Delay                     ; задержка более 10 ms
      movlw      b'00111000'               ; установка интерфейса 8 бит
      call       Lcd_Write_Cmd
      movlw      .20              
      call       Delay                     ; задержка более 5 ms
      movlw      b'00111000'               ; интерфейс 8 бит, 2 строки, 5 х 8 точек
      call       Lcd_Write_Cmd
      movlw      .20
      call       Delay                     ; задержка более 5 ms
      movlw      b'00001100'               ; вкл. дисплея, курсор выключен
      call       Lcd_Write_Cmd 
      movlw      .20
      call       Delay
      call       LCD_Clear                 ; Вызов подпрограммы очистки дисплея
      ;movlw	 b'00001111'    	       ; включение мигающего курсора
      ;call      Lcd_Write_Cmd  
      return
      
;--------------------------------------------------------------------------------------------------------------------
; Подпрограмма "Lcd_Write_Cmd" - посылка команды индикатору.
 Lcd_Write_Cmd:
; W - посылаемая индикатору команда. Предполагается, что  сигнал R\W в состоянии записи,
; чтение не используется.
       movwf        PORTB                ; Запись команды в порт 
       bcf          PORTC,RS             ; Режим "команда"
       nop                               ; Задержка на установление сигнала R\S (set-up time RS and R/W to E)
       nop                               ; должно быть не менее 40 нс
       bsf          PORTC,E              ; Устнановка строба
       nop
       nop 
       nop
       nop                               ; Задержка на два цикла
       bcf          PORTC,E              ; По спаду сигнала Е данные записываются в ЖКИ.
       call         Delay_70Us           ; Задержка 70 мкс. для быстрых команд.
       return
       
;--------------------------------------------------------------------------------------------------------------
; Подпрограмма "Lcd_Write_Data" - запись данных в индикатор.
Lcd_Write_Data:
; W - посылаемые индикатору данные. Предполагается, что  сигнал R\W в состоянии записи,
; чтение не используется.
       movwf        PORTB                ; Запись команды в порт 
       bsf          PORTC,RS             ; Режим "команда"
       nop                               ; Задержка на установление сигнала R\S (set-up time RS and R/W to E)
       nop                               ; должно быть не менее 40 нс
       bsf          PORTC,E              ; Устнановка строба
       nop
       nop                               ; Задержка на два цикла
       bcf          PORTC,E              ; По спаду сигнала Е данные записываются в ЖКИ.
       call         Delay_70Us           ; Задержка 70 мкс. для быстрых команд.
       return

;------------------------------------------------------------------------------------------------------------------
; Подпрограмма очистки дисплея.
LCD_Clear:
      movlw      b'00000001'              ; очистка дисплея
      call       Lcd_Write_Cmd
      movlw      .20
      call       Delay                    ; задержка более 5 ms
      movlw      b'10000000'              ; установка адреса DDRAM = 0 (в общем, команда лишняя)
      call       Lcd_Write_Cmd
      movlw      .20
      call       Delay
      return
      

;==============Задержки==============================================================================================
;--------------------------------------------------------------------------------------------------------------------
; Подпрограмма задержки "Delay"
Delay:
       movwf        TEMPh        
 Cycle:
       movwf        TEMP
 Cycle_1:
       decfsz       TEMP,F       
       goto         Cycle_1    
       decfsz       TEMPh,F      
       goto         Cycle       
       return                            ; Возврат из подпрограммы.
;----------------------------------------------------------------------------------------------------------------------
; Подпрограмма задержки "Delay_70Us"

Delay_70Us:
       movlw        .25       
       movwf        TEMP         
 Cycle_70Us:
       decfsz       TEMP,F       
       goto         Cycle_70Us    
       return                           ; Возврат из подпрограммы.

;---------------------------------------------------------------------------------------------------------------------------
; Подпрограмма задержки "Delay_x"

Delay_x:       
       movwf        TEMP         
 Cycle_x:
       decfsz       TEMP,F       
       goto         Cycle_x    
       return                           ; Возврат из подпрограммы.
 



 END


